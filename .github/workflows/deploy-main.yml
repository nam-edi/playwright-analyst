name: Deploy to Main

# D√©ploiement automatique quand on push sur main
on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Permet de d√©clencher manuellement

jobs:
  # Tests finaux avant d√©ploiement
  final-tests:
    runs-on: ubuntu-latest
    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4
    
    - name: üêç Configuration de Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: üì• Installation des d√©pendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: üß™ Tests complets
      run: |
        python manage.py test --verbosity=2 --parallel
      env:
        DJANGO_SETTINGS_MODULE: pw_analyst.settings
    
    - name: üèóÔ∏è Test de collecte des fichiers statiques
      run: |
        python manage.py collectstatic --noinput --verbosity=0
      env:
        DJANGO_SETTINGS_MODULE: pw_analyst.settings
    
    - name: ‚úÖ Validation du d√©ploiement
      run: |
        echo "‚úÖ Tous les tests passent sur main"
        echo "üöÄ Pr√™t pour le d√©ploiement"

  # Cr√©er un tag de version automatiquement
  create-release-tag:
    runs-on: ubuntu-latest
    needs: final-tests
    if: success()
    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: üè∑Ô∏è G√©n√©ration automatique de tag
      id: tag_version
      run: |
        # R√©cup√®re le dernier tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Dernier tag: $LAST_TAG"
        
        # Extrait le num√©ro de version
        VERSION=${LAST_TAG#v}
        IFS='.' read -ra ADDR <<< "$VERSION"
        MAJOR=${ADDR[0]:-0}
        MINOR=${ADDR[1]:-0}
        PATCH=${ADDR[2]:-0}
        
        # Incr√©mente le patch
        PATCH=$((PATCH + 1))
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        
        echo "Nouvelle version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Cr√©e le tag
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION - Auto-generated"
        git push origin "$NEW_VERSION"
    
    - name: üìã Cr√©ation de release GitHub
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_version.outputs.version }}
        release_name: Release ${{ steps.tag_version.outputs.version }}
        body: |
          üöÄ **Release automatique apr√®s merge sur main**
          
          **Changements :**
          - Tests Django : ‚úÖ Pass√©s
          - V√©rifications de s√©curit√© : ‚úÖ Valid√©es
          - Migrations : ‚úÖ Valid√©es
          
          **Hash du commit :** `${{ github.sha }}`
          **Date :** ${{ github.event.head_commit.timestamp }}
          
          Cette release a √©t√© cr√©√©e automatiquement apr√®s validation de tous les tests.
        draft: false
        prerelease: false

  # Notification de succ√®s
  notify-success:
    runs-on: ubuntu-latest
    needs: [final-tests, create-release-tag]
    if: always() && needs.final-tests.result == 'success'
    steps:
    - name: üéâ Notification de succ√®s
      run: |
        echo "## üéâ D√©ploiement Main R√©ussi" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Tests :** Tous pass√©s" >> $GITHUB_STEP_SUMMARY
        echo "üè∑Ô∏è **Version :** ${{ needs.create-release-tag.outputs.version || 'Tag non cr√©√©' }}" >> $GITHUB_STEP_SUMMARY
        echo "üìÖ **Date :** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "üîó **Commit :** [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ L'application est maintenant d√©ploy√©e sur main avec succ√®s !" >> $GITHUB_STEP_SUMMARY