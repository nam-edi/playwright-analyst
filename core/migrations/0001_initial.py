# Generated by Django 5.2.5 on 2025-09-01 13:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CIConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom de la configuration')),
                ('provider', models.CharField(choices=[('gitlab', 'GitLab'), ('github', 'GitHub')], max_length=20, verbose_name='Fournisseur CI')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
            ],
            options={
                'verbose_name': 'Configuration CI',
                'verbose_name_plural': 'Configurations CI',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom du tag')),
                ('color', models.CharField(default='#3b82f6', max_length=7, verbose_name='Couleur')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GitHubConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repository', models.CharField(help_text='Format: owner/repo', max_length=200, verbose_name='Repository')),
                ('access_token', models.CharField(help_text='GitHub Personal Access Token', max_length=200, verbose_name="Token d'accès")),
                ('workflow_name', models.CharField(help_text='Nom du workflow GitHub Actions', max_length=200, verbose_name='Nom du workflow')),
                ('artifact_name', models.CharField(help_text="Nom de l'artifact contenant les résultats", max_length=200, verbose_name="Nom de l'artifact")),
                ('json_filename', models.CharField(help_text="Nom du fichier JSON dans l'artifact", max_length=200, verbose_name='Nom du fichier JSON')),
                ('ci_config', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='github_config', to='core.ciconfiguration')),
            ],
            options={
                'verbose_name': 'Configuration GitHub',
                'verbose_name_plural': 'Configurations GitHub',
            },
        ),
        migrations.CreateModel(
            name='GitLabConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gitlab_url', models.URLField(help_text='Ex: https://gitlab.com', verbose_name='URL GitLab')),
                ('project_id', models.CharField(max_length=100, verbose_name='ID du projet GitLab')),
                ('access_token', models.CharField(help_text='Token avec permissions API', max_length=200, verbose_name="Token d'accès")),
                ('job_name', models.CharField(help_text='Nom du job contenant les artifacts', max_length=200, verbose_name='Nom du job')),
                ('artifact_path', models.CharField(help_text='Chemin du fichier JSON dans les artifacts', max_length=500, verbose_name='Chemin vers le JSON')),
                ('ci_config', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gitlab_config', to='core.ciconfiguration')),
            ],
            options={
                'verbose_name': 'Configuration GitLab',
                'verbose_name_plural': 'Configurations GitLab',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom du projet')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('ci_configuration', models.ForeignKey(blank=True, help_text='Configuration CI pour récupérer automatiquement les résultats', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.ciconfiguration', verbose_name='Configuration CI')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
            ],
            options={
                'verbose_name': 'Projet',
                'verbose_name_plural': 'Projets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Titre du test')),
                ('file_path', models.CharField(max_length=500, verbose_name='Chemin du fichier')),
                ('line', models.IntegerField(verbose_name='Ligne')),
                ('column', models.IntegerField(verbose_name='Colonne')),
                ('test_id', models.CharField(blank=True, max_length=100, verbose_name='ID du test')),
                ('story', models.TextField(blank=True, verbose_name='Histoire/Description')),
                ('comment', models.TextField(blank=True, verbose_name='Commentaire')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='core.project', verbose_name='Projet')),
                ('tags', models.ManyToManyField(blank=True, to='core.tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Test',
                'verbose_name_plural': 'Tests',
                'ordering': ['file_path', 'line'],
            },
        ),
        migrations.CreateModel(
            name='TestExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_file', models.CharField(blank=True, max_length=500, verbose_name='Fichier de configuration')),
                ('root_dir', models.CharField(blank=True, max_length=500, verbose_name='Répertoire racine')),
                ('playwright_version', models.CharField(blank=True, max_length=50, verbose_name='Version Playwright')),
                ('workers', models.IntegerField(default=1, verbose_name='Nombre de workers')),
                ('actual_workers', models.IntegerField(default=1, verbose_name='Workers réels')),
                ('git_commit_hash', models.CharField(blank=True, max_length=40, verbose_name='Hash du commit')),
                ('git_commit_short_hash', models.CharField(blank=True, max_length=10, verbose_name='Hash court du commit')),
                ('git_branch', models.CharField(blank=True, max_length=200, verbose_name='Branche Git')),
                ('git_commit_subject', models.TextField(blank=True, verbose_name='Sujet du commit')),
                ('git_author_name', models.CharField(blank=True, max_length=200, verbose_name='Auteur')),
                ('git_author_email', models.EmailField(blank=True, max_length=254, verbose_name='Email auteur')),
                ('ci_build_href', models.URLField(blank=True, verbose_name='Lien vers le build CI')),
                ('ci_commit_href', models.URLField(blank=True, verbose_name='Lien vers le commit CI')),
                ('start_time', models.DateTimeField(verbose_name="Début d'exécution")),
                ('duration', models.FloatField(verbose_name='Durée (ms)')),
                ('expected_tests', models.IntegerField(default=0, verbose_name='Tests attendus')),
                ('skipped_tests', models.IntegerField(default=0, verbose_name='Tests ignorés')),
                ('unexpected_tests', models.IntegerField(default=0, verbose_name='Tests inattendus')),
                ('flaky_tests', models.IntegerField(default=0, verbose_name='Tests instables')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Importé le')),
                ('raw_json', models.JSONField(help_text='Données JSON complètes', verbose_name='JSON brut')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='core.project', verbose_name='Projet')),
            ],
            options={
                'verbose_name': 'Exécution de tests',
                'verbose_name_plural': 'Exécutions de tests',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_id', models.CharField(max_length=50, verbose_name='ID projet Playwright')),
                ('project_name', models.CharField(max_length=200, verbose_name='Nom projet Playwright')),
                ('timeout', models.IntegerField(verbose_name='Timeout (ms)')),
                ('expected_status', models.CharField(max_length=20, verbose_name='Statut attendu')),
                ('status', models.CharField(choices=[('passed', 'Passé'), ('failed', 'Échoué'), ('skipped', 'Ignoré'), ('flaky', 'Instable'), ('expected', 'Attendu'), ('unexpected', 'Inattendu')], max_length=20, verbose_name='Statut')),
                ('worker_index', models.IntegerField(verbose_name='Index du worker')),
                ('parallel_index', models.IntegerField(verbose_name='Index parallèle')),
                ('duration', models.FloatField(verbose_name='Durée (ms)')),
                ('retry', models.IntegerField(default=0, verbose_name='Tentative')),
                ('start_time', models.DateTimeField(verbose_name='Début')),
                ('errors', models.JSONField(default=list, verbose_name='Erreurs')),
                ('stdout', models.JSONField(default=list, verbose_name='Sortie standard')),
                ('stderr', models.JSONField(default=list, verbose_name="Sortie d'erreur")),
                ('steps', models.JSONField(default=list, verbose_name='Étapes')),
                ('annotations', models.JSONField(default=list, verbose_name='Annotations')),
                ('attachments', models.JSONField(default=list, verbose_name='Pièces jointes')),
                ('execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_results', to='core.testexecution', verbose_name='Exécution')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='core.test', verbose_name='Test')),
            ],
            options={
                'verbose_name': 'Résultat de test',
                'verbose_name_plural': 'Résultats de tests',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='ProjectFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature_key', models.CharField(choices=[('evolution_tracking', 'Évolution par rapport à la dernière exécution')], max_length=50, verbose_name='Feature')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='Activée')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créée le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifiée le')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='core.project', verbose_name='Projet')),
            ],
            options={
                'verbose_name': 'Feature de projet',
                'verbose_name_plural': 'Features de projet',
                'ordering': ['project__name', 'feature_key'],
                'unique_together': {('project', 'feature_key')},
            },
        ),
        migrations.AddConstraint(
            model_name='test',
            constraint=models.UniqueConstraint(condition=models.Q(('test_id__isnull', False), models.Q(('test_id', ''), _negated=True)), fields=('project', 'test_id'), name='unique_test_id_per_project'),
        ),
        migrations.AlterUniqueTogether(
            name='test',
            unique_together={('project', 'title', 'file_path', 'line', 'column')},
        ),
    ]
