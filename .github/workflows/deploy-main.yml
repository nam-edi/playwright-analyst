name: Deploy to Main

# D√©ploiement automatique quand on push sur main
on:
  push:
    branches: [main]
  workflow_dispatch: # Permet de d√©clencher manuellement

# Permissions n√©cessaires pour cr√©er des tags et des releases
permissions:
  contents: write  # Pour cr√©er des tags et des releases
  pull-requests: read
  repository-projects: read

jobs:
  # Tests finaux avant d√©ploiement
  final-tests:
    runs-on: ubuntu-latest
    steps:
      - name: üîÑ Checkout du code
        uses: actions/checkout@v4

      - name: üêç Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: üì• Installation des d√©pendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üß™ Tests complets
        run: |
          python manage.py test --verbosity=2 --parallel
        env:
          DJANGO_SETTINGS_MODULE: pw_analyst.settings

      - name: üèóÔ∏è Test de collecte des fichiers statiques
        run: |
          python manage.py collectstatic --noinput --verbosity=0
        env:
          DJANGO_SETTINGS_MODULE: pw_analyst.settings

      - name: ‚úÖ Validation du d√©ploiement
        run: |
          echo "‚úÖ Tous les tests passent sur main"
          echo "üöÄ Pr√™t pour le d√©ploiement"

  # Cr√©er un tag de version automatiquement
  create-release-tag:
    runs-on: ubuntu-latest
    needs: final-tests
    if: success()
    steps:
      - name: üîÑ Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Calcul de la nouvelle version
        id: version_calc
        run: |
          # R√©cup√®re le dernier tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Dernier tag: $LAST_TAG"

          # Extrait le num√©ro de version
          VERSION=${LAST_TAG#v}
          IFS='.' read -ra ADDR <<< "$VERSION"
          MAJOR=${ADDR[0]:-0}
          MINOR=${ADDR[1]:-0}
          PATCH=${ADDR[2]:-0}

          # Incr√©mente le patch
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"

          echo "Nouvelle version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Cr√©ation du tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const newVersion = '${{ steps.version_calc.outputs.version }}';

            try {
              const result = await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${newVersion}`,
                sha: context.sha
              });

              console.log(`‚úÖ Tag ${newVersion} cr√©√© avec succ√®s`);

              // Export pour les √©tapes suivantes
              core.setOutput('tag_created', 'true');
              core.setOutput('version', newVersion);
            } catch (error) {
              console.error('‚ùå Erreur lors de la cr√©ation du tag:', error);
              core.setFailed(`Impossible de cr√©er le tag: ${error.message}`);
            }

      - name: üìã Cr√©ation de release GitHub
        uses: softprops/action-gh-release@v1
        if: steps.version_calc.outputs.version != ''
        with:
          tag_name: ${{ steps.version_calc.outputs.version }}
          name: Release ${{ steps.version_calc.outputs.version }}
          body: |
            üöÄ **Release automatique apr√®s merge sur main**

            **Changements :**
            - Tests Django : ‚úÖ Pass√©s
            - V√©rifications de s√©curit√© : ‚úÖ Valid√©es
            - Migrations : ‚úÖ Valid√©es

            **Hash du commit :** `${{ github.sha }}`
            **Date :** ${{ github.event.head_commit.timestamp }}

            Cette release a √©t√© cr√©√©e automatiquement apr√®s validation de tous les tests.
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification de succ√®s
  notify-success:
    runs-on: ubuntu-latest
    needs: [final-tests, create-release-tag]
    if: always() && needs.final-tests.result == 'success'
    steps:
      - name: üéâ Notification de succ√®s
        run: |
          echo "## üéâ D√©ploiement Main R√©ussi" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Tests :** Tous pass√©s" >> $GITHUB_STEP_SUMMARY
          echo "üè∑Ô∏è **Version :** ${{ needs.create-release-tag.outputs.version || 'Tag non cr√©√©' }}" >> $GITHUB_STEP_SUMMARY
          echo "üìÖ **Date :** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Commit :** [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üöÄ L'application est maintenant d√©ploy√©e sur main avec succ√®s !" >> $GITHUB_STEP_SUMMARY
