name: Django Tests

# Déclenche les tests sur :
# - Tous les push sur toutes les branches
# - Les pull requests vers main
# - Possibilité de lancer manuellement
on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - name: 🔄 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Configuration de Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache des dépendances pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📥 Installation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Vérifications statiques (flake8)
        run: |
          pip install flake8
          # Arrête la build si il y a des erreurs de syntaxe Python ou des noms non définis
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Traite tous les autres problèmes comme des warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: 🗄️ Vérification des migrations Django
        run: |
          python manage.py makemigrations --check --dry-run
        env:
          DJANGO_SETTINGS_MODULE: pw_analyst.settings

      - name: 🧪 Lancement des tests Django
        run: |
          python manage.py test --verbosity=2 --keepdb
        env:
          DJANGO_SETTINGS_MODULE: pw_analyst.settings

      - name: 📊 Génération du rapport de couverture
        run: |
          pip install coverage
          coverage run --source='.' manage.py test --keepdb
          coverage report
          coverage xml
        continue-on-error: true

      - name: 📤 Upload de la couverture vers Codecov
        if: matrix.python-version == '3.13' # Seulement pour une version de Python
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job séparé pour vérifier la sécurité
  security:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: 🛡️ Vérification de sécurité avec bandit
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt
        continue-on-error: true

      - name: 🔒 Audit des dépendances avec pip-audit
        run: |
          pip install pip-audit
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit
        continue-on-error: true

  # Job de notification de statut
  notify-status:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always()
    steps:
      - name: 📝 Résumé des tests
        run: |
          echo "## 🧪 Résultats des Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ **Tests Django :** Tous les tests passent" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests Django :** Échec des tests" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "🛡️ **Sécurité :** Aucun problème détecté" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Sécurité :** Problèmes potentiels détectés" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Branche: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
