name: Security & Dependencies Check

# Vérifications de sécurité quotidiennes et sur les changements de requirements.txt
on:
  schedule:
    - cron: "0 2 * * *" # Tous les jours à 2h du matin UTC
  push:
    paths:
      - "requirements.txt"
      - "requirements-dev.txt"
  workflow_dispatch:

jobs:
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: 📥 Installation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🛡️ Audit de sécurité avec pip-audit
        run: |
          pip install pip-audit
          pip-audit --format=json --output=security-report.json
          pip-audit --format=text
        continue-on-error: true

      - name: 🔒 Analyse de sécurité avec Bandit
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json
          bandit -r . -f txt
        continue-on-error: true

      - name: 🔍 Vérification des secrets avec detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline
        continue-on-error: true

      - name: 📊 Upload des rapports de sécurité
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            security-report.json
            bandit-report.json
          retention-days: 30

      - name: 📝 Créer issue si vulnérabilités critiques
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const title = '🚨 Vulnérabilités de sécurité détectées';
            const body = `
            ## 🚨 Rapport de sécurité automatique

            **Date :** ${new Date().toISOString()}
            **Workflow :** Security & Dependencies Check
            **Commit :** \`${{ github.sha }}\`

            Des vulnérabilités de sécurité ont été détectées dans les dépendances ou le code.

            ### Actions recommandées :
            1. 📋 Consulter les rapports d'artefacts dans cette exécution
            2. 🔧 Mettre à jour les dépendances vulnérables
            3. 🛠️ Corriger les problèmes de code identifiés par Bandit
            4. ✅ Relancer les vérifications

            ### Liens utiles :
            - [Exécution du workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Guide de sécurité Django](https://docs.djangoproject.com/en/stable/topics/security/)

            > Cette issue a été créée automatiquement. Fermez-la une fois les problèmes résolus.
            `;

            // Vérifie si une issue similaire existe déjà
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,automated'
            });

            const existingIssue = issues.find(issue => issue.title === title);

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'automated', 'bug']
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `🔄 **Nouvelle détection de vulnérabilités**\n\nDate: ${new Date().toISOString()}\nCommit: \`${{ github.sha }}\`\n\n[Voir les détails](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              });
            }

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: 📦 Analyse des dépendances obsolètes
        run: |
          python -m pip install --upgrade pip
          pip install pip-check-reqs pip-autoremove

          echo "📊 Vérification des dépendances manquantes :"
          pip-missing-reqs . || true

          echo "📊 Vérification des dépendances inutilisées :"
          pip-extra-reqs . || true

          echo "📊 Dépendances obsolètes :"
          pip list --outdated

      - name: 📈 Rapport de taille des dépendances
        run: |
          pip install -r requirements.txt
          echo "📊 Taille totale des dépendances installées :"
          pip list --format=freeze | wc -l

          echo "📊 Top 10 des plus gros packages :"
          pip show $(pip list --format=freeze | cut -d'=' -f1) | grep -E "^Name|^Version|^Location" | paste - - - | head -10

  # Job hebdomadaire pour nettoyer les anciennes branches
  cleanup:
    runs-on: ubuntu-latest
    if: github.event.schedule
    steps:
      - name: 🔄 Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧹 Nettoyage des branches mergées
        run: |
          echo "🧹 Nettoyage des branches locales mergées..."

          # Récupère toutes les branches
          git fetch --all --prune

          # Liste les branches mergées (exclut main et develop)
          MERGED_BRANCHES=$(git branch -r --merged origin/main | grep -v 'origin/main' | grep -v 'origin/HEAD' | sed 's/origin\///' || true)

          if [ -n "$MERGED_BRANCHES" ]; then
            echo "🗑️ Branches mergées trouvées :"
            echo "$MERGED_BRANCHES"

            # Note: La suppression automatique des branches est désactivée pour la sécurité
            # Pour l'activer, décommentez les lignes suivantes :
            # for branch in $MERGED_BRANCHES; do
            #   echo "Suppression de la branche : $branch"
            #   git push origin --delete "$branch" || true
            # done

            echo "ℹ️ Suppression automatique désactivée. Supprimez manuellement si nécessaire."
          else
            echo "✅ Aucune branche mergée à nettoyer."
          fi
